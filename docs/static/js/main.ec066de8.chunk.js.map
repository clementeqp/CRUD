{"version":3,"sources":["components/Navbar.js","components/About.js","components/Users.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","className","to","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","color","About","API","process","Users","useState","name","setName","email","setEmail","password","setPassword","editing","setEditing","setId","nameInput","useRef","users","setUsers","handleSubmit","e","a","preventDefault","fetch","method","headers","body","JSON","stringify","res","json","data","console","log","getUsers","current","focus","deleteUser","window","confirm","editUser","useEffect","onSubmit","onChange","target","value","placeholder","ref","autoFocus","map","user","key","_id","onClick","App","path","component","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ec066de8.chunk.js","sourcesContent":["import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nexport const Navbar = () => (\n  <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n    <Link className=\"navbar-brand\" to=\"/\">\n      Flask & React\n    </Link>\n    <button\n      className=\"navbar-toggler\"\n      type=\"button\"\n      data-toggle=\"collapse\"\n      data-target=\"#navbarNav\"\n      aria-controls=\"navbarNav\"\n      aria-expanded=\"false\"\n      aria-label=\"Toggle navigation\"\n    >\n      <span className=\"navbar-toggler-icon\" />\n    </button>\n    <div className=\"collapse navbar-collapse\" id=\"navbarNav\">\n      <ul className=\"navbar-nav\">\n        <li className=\"nav-item\">\n          <Link className=\"nav-link\" to=\"/about\">\n            About\n          </Link>\n        </li>\n      </ul>\n    </div>\n    <h5 className=\"text-end\" color=\"primary\" color=\"#ccc\">by Clemente Quintana</h5>\n  </nav>\n);\n","import React, { Fragment } from \"react\";\n\nexport const About = () => (\n  <Fragment>\n    <div className=\"row\">\n      <h3>About</h3>\n      <p>\n        Lorem ipsum dolor sit amet consectetur adipisicing elit. Debitis\n        consequuntur, animi modi aperiam eos doloribus error temporibus ducimus,\n        odio aut cum numquam dolore minus tempora quibusdam hic provident beatae\n        totam dignissimos placeat tenetur nisi minima voluptatum! Quae\n        voluptatum qui deleniti incidunt fuga, delectus eius quam soluta ipsa\n        dolorem alias inventore, ad dolor mollitia eum fugit, rem ex! Aperiam\n        excepturi, quo consectetur sapiente possimus vero nisi perferendis\n        dolore voluptate doloribus quidem distinctio sint, architecto provident\n        repellendus quod odio animi. Magnam eius, eligendi, veritatis dolor,\n        incidunt culpa harum tenetur suscipit tempora sequi non ab. Mollitia\n        fugiat expedita molestiae quae. Repellendus ad ab fugiat deleniti\n        aspernatur, facilis necessitatibus officiis, hic expedita saepe quae\n        distinctio eligendi fugit at, cumque illo molestias suscipit!\n        Reiciendis, nihil eaque quis pariatur repellendus, illum consequatur,\n        unde cumque vero natus ipsum! Distinctio nesciunt possimus quibusdam\n        amet quaerat sapiente eius cumque fuga doloremque illo quos odit\n        tempora, vero est omnis esse.\n      </p>\n    </div>\n  </Fragment>\n);\n","import React, { useState, useEffect, useRef } from \"react\";\n\nconst API = process.env.REACT_APP_API;\n\nexport const Users = () => {\n  const [name, setName] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n\n  const [editing, setEditing] = useState(false);\n  const [id, setId] = useState(\"\");\n\n  const nameInput = useRef(null);\n\n  let [users, setUsers] = useState([]);\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    if (!editing) {\n      const res = await fetch(`${API}/users`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          name,\n          email,\n          password,\n        }),\n      });\n      await res.json();\n    } else {\n      const res = await fetch(`${API}/users/${id}`, {\n        method: \"PUT\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          name,\n          email,\n          password,\n        }),\n      });\n      const data = await res.json();\n      console.log(data);\n      setEditing(false);\n      setId(\"\");\n    }\n    await getUsers();\n\n    setName(\"\");\n    setEmail(\"\");\n    setPassword(\"\");\n    nameInput.current.focus();\n  };\n\n  const getUsers = async () => {\n    const res = await fetch(`${API}/users`);\n    const data = await res.json();\n    setUsers(data);\n  };\n\n  const deleteUser = async (id) => {\n    const userResponse = window.confirm(\"Are you sure you want to delete it?\");\n    if (userResponse) {\n      const res = await fetch(`${API}/users/${id}`, {\n        method: \"DELETE\",\n      });\n      const data = await res.json();\n      console.log(data);\n      await getUsers();\n    }\n  };\n\n  const editUser = async (id) => {\n    const res = await fetch(`${API}/users/${id}`);\n    const data = await res.json();\n\n    setEditing(true);\n    setId(id);\n\n    // Reset\n    setName(data.name);\n    setEmail(data.email);\n    setPassword(data.password);\n    nameInput.current.focus();\n  };\n\n  useEffect(() => {\n    getUsers();\n  }, []);\n\n  return (\n    <div className=\"row\">\n      <div className=\"col-md-4\">\n        <form onSubmit={handleSubmit} className=\"card card-body\">\n          <div className=\"form-group\">\n            <input\n              type=\"text\"\n              onChange={(e) => setName(e.target.value)}\n              value={name}\n              className=\"form-control\"\n              placeholder=\"Name\"\n              ref={nameInput}\n              autoFocus\n            />\n          </div>\n          <div className=\"form-group\">\n            <input\n              type=\"email\"\n              onChange={(e) => setEmail(e.target.value)}\n              value={email}\n              className=\"form-control\"\n              placeholder=\"User's Email\"\n            />\n          </div>\n          <div className=\"form-group\">\n            <input\n              type=\"password\"\n              onChange={(e) => setPassword(e.target.value)}\n              value={password}\n              className=\"form-control\"\n              placeholder=\"User's Password\"\n            />\n          </div>\n          <button className=\"btn btn-primary btn-block\">\n            {editing ? \"Update\" : \"Create\"}\n          </button>\n        </form>\n      </div>\n      <div className=\"col-md-6\">\n        <table className=\"table table-striped\">\n          <thead>\n            <tr>\n              <th>Name</th>\n              <th>Email</th>\n              <th>Password</th>\n              <th>Operations</th>\n            </tr>\n          </thead>\n          <tbody>\n            {users.map((user) => (\n              <tr key={user._id}>\n                <td>{user.name}</td>\n                <td>{user.email}</td>\n                <td>{user.password}</td>\n                <td>\n                  <button\n                    className=\"btn btn-secondary btn-sm btn-block\"\n                    onClick={(e) => editUser(user._id)}\n                  >\n                    Edit\n                  </button>\n                  <button\n                    className=\"btn btn-danger btn-sm btn-block\"\n                    onClick={(e) => deleteUser(user._id)}\n                  >\n                    Delete\n                  </button>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    </div>\n  );\n};\n","import React from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nimport { Navbar } from \"./components/Navbar\";\nimport { About } from \"./components/About\";\nimport { Users } from \"./components/Users\";\n\nfunction App() {\n  return (\n    <Router>\n      <Navbar />\n\n      <div className=\"container p-4\">\n        <Switch>\n          <Route path=\"/about\" component={About} />\n          <Route path=\"/\" component={Users} />\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'bootswatch/dist/lumen/bootstrap.min.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}